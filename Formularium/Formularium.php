<?php declare(strict_types=1);

namespace Formularium;

use HaydenPierce\ClassFinder\ClassFinder;

/**
 * Abstract base class for frameworks. Each framework should have a class inheriting
 * from this class.
 */
final class Formularium
{
    /**
     *
     * @var string[]
     */
    private static $validatorNamespaces = [
        'Formularium\\Validator'
    ];

    /**
     *
     * @var string[]
     */
    private static $datatypeNamespaces = [
        'Formularium\\Datatype'
    ];

    /**
     * @codeCoverageIgnore
     */
    private function __construct()
    {
        // empty
    }

    /**
     * @param string $ns The namespace to add
     * @return void
     * @codeCoverageIgnore
     */
    public static function appendDatatypeNamespace(string $ns): void
    {
        self::$datatypeNamespaces[] = $ns;
    }

    /**
     * Get the value of datatypeNamespaces
     *
     * @return  string[]
     */
    public static function getDatatypeNamespaces(): array
    {
        return self::$datatypeNamespaces;
    }
    
    /**
     * @param string $ns The namespace to add
     * @return void
     * @codeCoverageIgnore
     */
    public static function appendValidatorNamespace(string $ns): void
    {
        self::$validatorNamespaces[] = $ns;
    }

    /**
     * Get the value of validatorNamespaces
     *
     * @return  string[]
     */
    public static function getValidatorNamespaces(): array
    {
        return self::$validatorNamespaces;
    }

    /**
     * Returns a list class name => datatype.
     *
     * @return array<string, string>
     */
    public static function getDatatypeNames(): array
    {
        $datatypes = [];

        foreach (self::$datatypeNamespaces as $datatypeNamespace) {
            /** @var array<class-string> $classesInNamespace */
            $classesInNamespace = ClassFinder::getClassesInNamespace($datatypeNamespace);

            foreach ($classesInNamespace as $class) {
                $reflection = new \ReflectionClass($class);
                if (!$reflection->isInstantiable()) {
                    continue;
                }

                if (!is_a($class, Datatype::class, true)) {
                    continue;
                }

                /**
                 * @var Datatype $d
                 */
                $d = new $class(); // TODO: factory would be better

                $datatypes[$class] = $d->getName();
            }
        }

        return $datatypes;
    }

    /**
     * Returns a list classname => validator
     *
     * @return array<string, string>
     */
    public static function getValidatorNames(): array
    {
        $validators = [];

        foreach (self::$validatorNamespaces as $validatorNamespace) {
            /** @var array<class-string> $classesInNamespace */
            $classesInNamespace = ClassFinder::getClassesInNamespace($validatorNamespace);

            foreach ($classesInNamespace as $class) {
                $reflection = new \ReflectionClass($class);
                if (!$reflection->isInstantiable()) {
                    continue;
                }

                if (!is_a($class, ValidatorInterface::class, true)) {
                    continue;
                }

                $name = mb_substr($class, strrpos($class, '\\') + 1);
                $validators[$class] = $name;
            }
        }

        return $validators;
    }

    public static function scalarGraphqlDirectives(): string
    {
        $classes = static::getDatatypeNames();
        $graphql = [];
        foreach ($classes as $className => $name) {
            $graphql[] = "scalar $name @scalar(class: \"{$className}\")";
        }

        return '
# File generated by Formularium.
# Do not edit this file directly.

' . join("\n\n", $graphql);
    }

    public static function validatorGraphqlDirectives(): string
    {
        $classes = static::getValidatorNames();
        $graphql = [];
        foreach ($classes as $className => $name) {
            $graphql[] = $className::getMetadata()->toGraphql();
        }

        return '
# File generated by Formularium.
# Do not edit this file directly.

' . join("\n", $graphql);
    }
}
