<?php declare(strict_types=1);

namespace Formularium;

use Formularium\Exception\Exception;

/**
 * Abstract base class for frameworks. Each framework should have a class inheriting
 * from this class.
 */
final class Formularium
{
    /**
     *
     * @var string[]
     */
    private static $validatorDirectories = [
        __DIR__ . '/Validator/'
    ];

    /**
     *
     * @var string[]
     */
    private static $datatypeDirectories = [
        __DIR__ . '/Datatype/'
    ];

    private function __construct()
    {
        // empty
    }

    public static function appendDatatypeDirectory(string $dir): void
    {
        self::$datatypeDirectories[] = $dir;
    }

    public static function appendValidatorDirectory(string $dir): void
    {
        self::$validatorDirectories[] = $dir;
    }

    /**
     * Returns a list of datatype class names
     *
     * @return array
     */
    public static function getDatatypeNames(): array
    {
        $datatypes = [];
        foreach (self::$validatorDirectories as $dir) {
            $files = scandir($dir);
            if (!$files) {
                throw new Exception('Datatypes not found');
            }
            $d = array_map(
                function ($x) {
                    return str_replace('Datatype_', '', str_replace('.php', '', $x));
                },
                array_diff($files, array('.', '..'))
            );
    
            // TODO: avoid abstract classes dinamically
            $d = array_filter(
                $d,
                function ($t) {
                    return ($t !== 'number' && $t !== 'choice' && $t !== 'association' && $t !== 'country');
                }
            );

            $datatypes = array_merge($datatypes, $d);
        }

        return $datatypes;
    }

    /**
     * Returns a list of datatype class names
     *
     * @return array
     */
    public static function getValidatorNames(): array
    {
        $validators = [];
        foreach (self::$validatorDirectories as $dir) {
            $files = scandir($dir);
            if (!$files) {
                throw new Exception('Validators not found');
            }
            $v = array_map(
                function ($x) {
                    return str_replace('.php', '', $x);
                },
                array_diff($files, array('.', '..'))
            );
            $validators = array_merge($validators, $v);
        }
        return $validators;
    }

    public static function scalarGraphqlDirectives(): string
    {
        $classes = static::getDatatypeNames();
        $graphql = [];
        foreach ($classes as $name) {
            $v = Datatype::factory($name);
            $className = get_class($v);
            $graphql[] = "scalar $name @scalar(class: \"{$className}\")";
        }

        return '
# File generated by Formularium.
# Do not edit this file directly.

' . join("\n\n", $graphql);
    }

    public static function validatorGraphqlDirectives(): string
    {
        $classes = static::getValidatorNames();
        $graphql = [];
        foreach ($classes as $name) {
            $graphql[] = Validator::class($name)::getMetadata()->toGraphql();
        }

        return '
# File generated by Formularium.
# Do not edit this file directly.

' . join("\n", $graphql);
    }
}
